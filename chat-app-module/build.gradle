plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'jsl.moum'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

//	MongoDB Reactive
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive:3.3.5'
	implementation 'org.mongodb:mongodb-driver-core:5.2.0'
	implementation 'org.mongodb:mongodb-driver-reactivestreams:5.2.0'
	implementation 'org.mongodb:bson:5.2.0'
	runtimeOnly 'org.mongodb:bson-record-codec:5.2.0'

//	MySQL R2DBC
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'io.asyncer:r2dbc-mysql:1.3.0'
	implementation 'mysql:mysql-connector-java:8.0.33'
	runtimeOnly 'com.mysql:mysql-connector-j'

//	Redis Reactive
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

//	Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

//	JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

//	Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

//	Firebase Admin SDK
	implementation 'com.google.firebase:firebase-admin:9.4.1'

//	Mockito
	testImplementation 'org.mockito:mockito-core:5.14.2'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.14.2'

//	JaCoCo Test Coverage
	implementation 'org.jacoco:org.jacoco.core:0.8.12'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.8"
}

tasks.test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Generate coverage report after tests
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}